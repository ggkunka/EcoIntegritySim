import numpy as np
from tensorflow.keras import layers, models
from web3 import Web3
import pandas as pd
import json
import argparse

# Path to the ABI file generated by Truffle
ABI_PATH = '/Users/jayaprakash/EcoIntegritySim/eco-integrity-contract/build/contracts/EcoIntegrity.json'

# Argument parsing for contract address and network ID
parser = argparse.ArgumentParser()
parser.add_argument("--contract_address", required=True, help="Contract address deployed by Truffle")
parser.add_argument("--network_id", required=True, help="Network ID on which the contract was deployed")
args = parser.parse_args()

# Connect to Ganache blockchain
ganache_url = "http://127.0.0.1:8545"
web3 = Web3(Web3.HTTPProvider(ganache_url))

# Check connection
assert web3.is_connected(), "Ganache connection failed"

# Load contract ABI and address from the JSON file
def load_contract_abi(abi_path, network_id):
    with open(abi_path) as f:
        contract_json = json.load(f)
        contract_abi = contract_json['abi']
        if network_id in contract_json['networks']:
            contract_address = contract_json['networks'][network_id]['address']
        else:
            raise KeyError(f"Network ID {network_id} not found in ABI file.")
    return contract_abi, contract_address

# Load the contract ABI and address
try:
    contract_abi, contract_address = load_contract_abi(ABI_PATH, args.network_id)
    print(f"Contract ABI loaded successfully. Contract address: {contract_address}")
except KeyError as e:
    print(f"Error loading contract: {str(e)}")
    exit(1)

# Load the contract using Web3
eco_integrity = web3.eth.contract(address=contract_address, abi=contract_abi)

# Function to load ToNIoT weather data
def load_toniot_weather_data(file_path):
    data = pd.read_csv(file_path)
    data['date'] = data['date'].str.strip()
    data['time'] = data['time'].str.strip()
    data['timestamp'] = pd.to_datetime(data['date'] + ' ' + data['time'], format='%d-%b-%y %H:%M:%S')
    
    # Select relevant features: temperature, pressure, humidity, label
    X = data[['temperature', 'pressure', 'humidity']].values
    y = data['label'].values  # Label indicates attack (1) or benign (0)
    
    return pd.DataFrame(X), pd.Series(y)

# Load ToNIoT weather data
X, y = load_toniot_weather_data('/Users/jayaprakash/EcoIntegritySim/Train_Test_IoT_Weather.csv')

# Anomaly Detection with Autoencoder
def create_autoencoder(input_dim):
    input_layer = layers.Input(shape=(input_dim,))
    encoded = layers.Dense(128, activation="relu")(input_layer)
    encoded = layers.Dense(64, activation="relu")(encoded)
    encoded = layers.Dense(32, activation="relu")(encoded)

    decoded = layers.Dense(64, activation="relu")(encoded)
    decoded = layers.Dense(128, activation="relu")(decoded)
    decoded = layers.Dense(input_dim, activation="sigmoid")(decoded)

    autoencoder = models.Model(input_layer, decoded)
    autoencoder.compile(optimizer="adam", loss="binary_crossentropy")
    return autoencoder

# Prepare training and test datasets
X_train = X.iloc[:800].values  # First 800 as training data
X_test = X.iloc[800:].values   # Last 200 as test data

# Train Autoencoder
autoencoder = create_autoencoder(X_train.shape[1])
autoencoder.fit(X_train, X_train, epochs=50, batch_size=32, shuffle=True, validation_data=(X_test, X_test))

# Save and deploy the model
autoencoder.save("ids_model.keras")

# Simulate an anomaly detection and log it to the blockchain
def log_anomaly(anomaly_hash):
    tx_hash = eco_integrity.functions.logData(anomaly_hash).transact({'from': web3.eth.accounts[0]})
    web3.eth.wait_for_transaction_receipt(tx_hash)
    print(f"Anomaly {anomaly_hash} logged successfully in blockchain")

# Simulate detecting an anomaly
anomaly_hash = "hash_of_detected_anomaly"
log_anomaly(anomaly_hash)
